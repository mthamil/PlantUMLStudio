<UserControl 
    x:Class="PlantUmlEditor.View.DiagramEditorView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:attached="clr-namespace:Utilities.Controls.Behaviors;assembly=Utilities.Controls" 
    xmlns:avalon="clr-namespace:Utilities.Controls.Behaviors.AvalonEdit;assembly=Utilities.Controls" 
    xmlns:convert="clr-namespace:Utilities.Controls.Converters;assembly=Utilities.Controls" 
    xmlns:MultiKey="clr-namespace:Utilities.Controls.MultiKey;assembly=Utilities.Controls" 
    xmlns:utilcmd="clr-namespace:Utilities.Controls.Commands;assembly=Utilities.Controls" 
    xmlns:cmd="clr-namespace:PlantUmlEditor.ViewModel.Commands"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:split="clr-namespace:Utilities.Controls.Behaviors.GridSplitterExpanderSupport;assembly=Utilities.Controls"
    mc:Ignorable="d" 
    d:DesignHeight="462" d:DesignWidth="584"
    FocusManager.FocusedElement="{Binding ElementName=ContentEditor}">
    
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Utilities.Controls;component/Styles.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Resources/Icons/Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            
            <convert:SecondsToTimeSpanConverter x:Key="SecondsConverter"/>
            <utilcmd:OpenContextMenuCommand x:Key="OpenContextMenuCommand"/>

            <convert:ComposingConverter x:Key="NullToVisibilityConverter">
                <convert:ComposingConverter.Converters>
                    <convert:NullToFalseValueConverter/>
                    <convert:BooleanToVisibilityValueConverter/>
                </convert:ComposingConverter.Converters>
            </convert:ComposingConverter>

        </ResourceDictionary>
    </UserControl.Resources>
  
    <Border x:Name="WorkingPanel" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{x:Null}" CornerRadius="0,0,0,0">
        <Grid Height="Auto">
            <Grid.RowDefinitions>
                <RowDefinition Height=".57*"/>
                <RowDefinition Height=".03*" MinHeight="5"/>
                <RowDefinition Height=".40*"/>
            </Grid.RowDefinitions>

            <Grid Grid.Row="0" VerticalAlignment="Stretch" FocusManager.IsFocusScope="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height=".90*"/>
                    <RowDefinition Height=".10*" MinHeight="35"/>
                </Grid.RowDefinitions>
        
                <avalonEdit:TextEditor Grid.Row="0" x:Name="ContentEditor" Padding="10"
                                       HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                       FontFamily="Consolas" FontSize="11pt" Background="White" Foreground="Black"
                                       ShowLineNumbers="True"
                                       IsEnabled="{Binding IsIdle}"
                                       Document="{Binding CodeEditor.Document}"
                                       SyntaxHighlighting="{Binding CodeEditor.HighlightingDefinition}">
                    
                    <i:Interaction.Behaviors>
                        <avalon:BindableScrollOffsetBehavior ScrollOffset="{Binding CodeEditor.ScrollOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <avalon:FoldingStrategyBehavior FoldingStrategy="{Binding CodeEditor.FoldingStrategy}"/>
                        <avalon:SelectionManagement CaretIndex="{Binding CodeEditor.ContentIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    SelectionStart="{Binding CodeEditor.SelectionStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    SelectionLength="{Binding CodeEditor.SelectionLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </i:Interaction.Behaviors>
                    
                    <avalonEdit:TextEditor.InputBindings>
                        <KeyBinding Key="S" Modifiers="Control" Command="{Binding SaveCommand}" />
                        <MultiKey:MultiKeyBinding Command="{StaticResource OpenContextMenuCommand}" 
                                                  CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=avalonEdit:TextEditor}}"
                                                  Gesture="Ctrl+N,Ctrl+P"/>
                    </avalonEdit:TextEditor.InputBindings>
                    
                    <avalonEdit:TextEditor.ContextMenu>
                        <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                            <MenuItem Header="Cut" 
                                      Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.CodeEditor.CutCommand}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource CutIcon_Small}" Style="{StaticResource DisableableIcon}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Copy" 
                                      Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.CodeEditor.CopyCommand}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource CopyIcon_Small}" Style="{StaticResource DisableableIcon}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Paste" 
                                      Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.CodeEditor.PasteCommand}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource PasteIcon_Small}" Style="{StaticResource DisableableIcon}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator/>
                            <MenuItem Header="Snippets" ItemsSource="{Binding CodeEditor.Snippets}">
                                <MenuItem.ItemTemplate>
                                    <HierarchicalDataTemplate ItemsSource="{Binding Path=SubMenu}">
                                        <StackPanel Orientation="Horizontal">
                                            <Image Source="{Binding Icon}" Stretch="None" Style="{StaticResource DisableableIcon}"/>
                                            <TextBlock Text="{Binding Name}" />
                                        </StackPanel>
                                    </HierarchicalDataTemplate>
                                </MenuItem.ItemTemplate>
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="{x:Type MenuItem}">
                                        <Setter Property="Command" Value="{Binding Command}"/>
                                        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"/>
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                        </ContextMenu>
                    </avalonEdit:TextEditor.ContextMenu>
                </avalonEdit:TextEditor>
        
                <Border Grid.Row="1">
                    <WrapPanel Margin="4" Background="#2B3C59" VerticalAlignment="Center">
                        <CheckBox x:Name="AutoSaveCheckbox" Content="AutoSave" VerticalAlignment="Center" IsChecked="{Binding AutoSave, Mode=TwoWay}" Margin="10,0,5,0" Foreground="White"/>
                        <TextBox Text="{Binding AutoSaveInterval, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource SecondsConverter}}" VerticalAlignment="Center" MaxWidth="30"/>
                        <TextBlock Text=" Secs" VerticalAlignment="Center" Margin="0,0,10,0" Foreground="White"/>
                    </WrapPanel>
                </Border>
        
            </Grid>

            <GridSplitter Grid.Row="1" VerticalAlignment="Center" Width="Auto" Height="3"  HorizontalAlignment="Stretch" Background="#66808080"/>

            <Expander Grid.Row="2" Name="ImageExpander" ExpandDirection="Up" IsExpanded="True" Margin="0,0,0,0" Background="White"
                      Style="{StaticResource ExpanderStyle}">
                <i:Interaction.Behaviors>
                    <split:GridSplitterExpanderSupportBehavior/>
                </i:Interaction.Behaviors>
                <Expander.Content>
                    <Border ScrollViewer.CanContentScroll="True" 
                            ScrollViewer.HorizontalScrollBarVisibility="Visible" 
                            ScrollViewer.VerticalScrollBarVisibility="Visible">
          
                        <ScrollViewer HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CanContentScroll="True" 
                                      HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" 
                                      Background="White" >
            
                            <Image x:Name="DiagramImage" HorizontalAlignment="Center" VerticalAlignment="Top" 
                                   Source="{Binding DiagramImage, Mode=OneWay}" 
                                   Stretch="None">
              
                                <Image.ContextMenu>
                                    <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                        <MenuItem Header="Copy Image" 
                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, 
                                                                             Path=DataContext.DiagramImage}">
                                            <MenuItem.Command>
                                                <cmd:CopyImageCommand/>
                                            </MenuItem.Command>
                                            <MenuItem.Icon>
                                                <Image Source="{StaticResource CopyImageIcon_Small}" Stretch="None" Style="{StaticResource DisableableIcon}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="Copy Image Path" 
                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, 
                                                                             Path=DataContext.Diagram.ImageFilePath}">
                                            <MenuItem.Command>
                                                <cmd:CopyTextCommand/>
                                            </MenuItem.Command>
                                            <!--<MenuItem.Icon>
                                                <Image Source="{StaticResource CutIcon_Small}" Style="{StaticResource DisableableIcon}"/>
                                            </MenuItem.Icon>-->
                                        </MenuItem>
                                        <MenuItem Header="Browse to Image" 
                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, 
                                                                             Path=DataContext.Diagram.ImageFilePath}">
                                            <MenuItem.Command>
                                                <cmd:BrowseToCommand/>
                                            </MenuItem.Command>
                                            <MenuItem.Icon>
                                                <Image Source="{StaticResource BrowseToImageIcon_Small}" Style="{StaticResource DisableableIcon}"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </ContextMenu>
                                </Image.ContextMenu>
              
                                <Image.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform 
                                            ScaleX="{Binding ElementName=ZoomSlider, Path=Value}" 
                                            ScaleY="{Binding ElementName=ZoomSlider, Path=Value}"/>
                                    </TransformGroup>
                                </Image.RenderTransform>
              
                            </Image>

                        </ScrollViewer>
                    </Border>
                </Expander.Content>

                <Expander.Header>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Stretch">
                        <Slider x:Name="ZoomSlider" Minimum="0.1" Maximum="2.0" Value="1.0" Width="50" SmallChange="0.1" LargeChange="0.2"
                                Visibility="{Binding DiagramImage, Converter={StaticResource NullToVisibilityConverter}}"/>
                    </StackPanel>
                </Expander.Header>
            </Expander>
            
        </Grid>
    </Border>
</UserControl>
